//  AASTMT
//  Computer Graphics Class 05
//  3 Nov, 2016
//  Created by Mohammed Barakat

#include <iostream>
#include <GLUT/glut.h>
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <stdlib.h>
#include<math.h>

class wePt2D{
public:
    GLfloat x, y;
};

// Intialize openGL
void init(void) {
    
    //set display-window background color to white
    glClearColor(1.0, 1.0, 1.0, 0.0);
    
    //set projection paramaters
    glMatrixMode(GL_PROJECTION);
    
    //set projection origin
    gluOrtho2D(0.0, 400.0, -200.0, 200.0);
}

// Set Pixel Drawing Style and coordination
void setPixel(int xCoordinate, int yCoordinate) {
    
    //Set Drawing Style to Points, Lines or Polygonal
    glBegin(GL_POINTS);
    
    //set x and y coordination
    glVertex2i(xCoordinate, yCoordinate);
    
    //end drawing session
    glEnd();
    
    //executes all OpenGL functions as quickly as possible
    glFlush();
}


void drawFilledCircle(GLfloat x, GLfloat y, GLfloat radius,GLfloat c1, GLfloat c2, GLfloat c3){
    
  
    int triangleAmount = 30;                        // No of triangles used to draw circle
    glColor3f(c1, c2, c3);                          // Set Color
    GLfloat twicePi = 2.0f * M_PI;                  // GLfloat radius = 0.8f; //radius
    glBegin(GL_TRIANGLE_FAN);                       // Set GL drawing method to trainagle fan
    glVertex2f(x, y);                               // set center of circle
    
    // loop to draw the circle by 30 triangle with one center
    for(  int i = 0; i <= triangleAmount;i++) {
        glVertex2f(x + (radius * cos(i *  twicePi / triangleAmount)), y + (radius * sin(i * twicePi / triangleAmount)));
    }
    
    glEnd();
}

void drawPolygon(double c1,double c2, double c3, int x1,int x2,int x3,int x4,int y1,int y2,int y3,int y4){
    
    glColor3f(c1,c2,c3);                            // set polygonal color
    glPointSize(3.0);                               // set point size to 3
    glBegin(GL_POLYGON);                            //  Set GL drawing method to Polygon
    
    // set Polygon Vertices
    glVertex2i(x1,y1);
    glVertex2i(x2,y2);
    glVertex2i(x3,y3);
    glVertex2i(x4,y4);
    
    glEnd();
    glFlush();
    
}

void drawEmptyPolygon(double c1,double c2, double c3, int x1,int x2,int x3,int x4,int y1,int y2,int y3,int y4){
    
    glColor3f(c1,c2,c3);                         // set polygonal color
    glPointSize(3.0);                            // set point size to 3
    glBegin(GL_LINE_LOOP);                       //  Set GL drawing method to Line Loop
    
    // set Polygon Vertices
    glVertex2i(x1,y1);
    glVertex2i(x2,y2);
    glVertex2i(x3,y3);
    glVertex2i(x4,y4);
    
    glEnd();
    glFlush();
    
}


void drawPolygon(GLdouble theta){
    while (theta<=360.0) {
        GLint nVerts = 3;
        wePt2D verts[3];
        wePt2D pivPt;
        pivPt.x = 100;
        pivPt.y = -40;
        setPixel(pivPt.x, pivPt.y);
        verts[0].x = 95;
        verts[1].x = 100;
        verts[2].x = 105;
        verts[0].y = -24;
        verts[1].y = -10;
        verts[2].y = -24;
        glColor3f(0.0, 0.0, 1.0);
        glBegin(GL_POLYGON);
        for (GLint k = 0; k < nVerts; k++)  { glVertex2f(verts[k].x, verts[k].y); }
        glEnd();
        glFlush();

        glTranslatef(100, -40, 0);
        glRotatef(theta, 0, 0, 1);
        glTranslatef(-100, 40, 0);
        theta=theta+45;
    }
    
}






void display(void) {
    
    // Clear Buffer
    glClear(GL_COLOR_BUFFER_BIT);
    
 
    
    
    // left Cricles
   
    drawFilledCircle(100, -40, 35,0,0,0);
    drawFilledCircle(100, -40, 23,1,1,1);
    drawFilledCircle(100, -40, 15,0,0,1);
    
    // Right Cricles
    drawFilledCircle(300, -40, 35,0,0,0);
    drawFilledCircle(300, -40, 23,1,1,1);
    drawFilledCircle(300, -40, 15,0,0,1);
    
    // Body
    drawPolygon(0.0,0.0,0.0,67,380,380,67,-16,-16,50,50);
    
    // Bumper
    drawPolygon(0.5,0.5,0.5,347,380,380,347,-26,-26,-16,-16);
    
    // Glass
    drawEmptyPolygon(0.0,0.0,0.0,140,180,180,140,124,124,50,50);
    drawEmptyPolygon(0.0,0.0,0.0,180,260,260,180,124,124,50,50);
    drawEmptyPolygon(0.0,0.0,0.0,260,280,280,260,124,124,50,50);
    
    // left Triangles
    
    drawPolygon(0.0);





    
    glEnd();
    glFlush();
    
}

void keyEvent(unsigned char key, int x, int y)
{
    switch (key) {
        case 's':
            drawPolygon(0.0);
            glTranslatef(100, -40, 0);
            glRotatef(5, 0, 0, 1);
            glTranslatef(-100, 40, 0);

            glFlush();

            break;
        case 'w':

            drawPolygon(0.0);
            
            glTranslatef(100, -40, 0);
            glRotatef(-5, 0, 0, 1);
            glTranslatef(-100, 40, 0);
            
            break;
        default:
            break;
    }
    
    
}
// Main Method
int main(int argc, char * argv[]) {
    
    
    // initialize GLUT
    glutInit(&argc, argv);
    
    // initialize display MODE
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    
    // set display window SIZE
    glutInitWindowSize(1200, 700);
    
    // set display window ORIGIN
    glutInitWindowPosition(40, 60);
    
    // set window NAME
    glutCreateWindow("BMW 740Li");
    
    // initialize OpenGL
    init();
    
    // begain to draw the object
    glutDisplayFunc(display);
    
    glutKeyboardFunc(keyEvent);//key event

    //display everything and wait
    glutMainLoop();
    
    
    return 0;
    
}

//  AASTMT
//  Computer Graphics Class 05
//  3 Nov, 2016
//  Created by Mohammed Barakat

#include <iostream>
#include <GLUT/glut.h>
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <stdlib.h>
#include<math.h>

class wePt2D{
public:
    GLfloat x, y;
    };

// Intialize openGL
void init(void) {
    
    //set display-window background color to white
    glClearColor(1.0, 1.0, 1.0, 0.0);
    
    //set projection paramaters
    glMatrixMode(GL_PROJECTION);
    
    //set projection origin
    gluOrtho2D(0.0, 400.0, -200.0, 200.0);
}

// Set Pixel Drawing Style and coordination
void setPixel(int xCoordinate, int yCoordinate) {
    
    //Set Drawing Style to Points, Lines or Polygonal
    glBegin(GL_POINTS);
    
    //set x and y coordination
    glVertex2i(xCoordinate, yCoordinate);
    
    //end drawing session
    glEnd();
    
    //executes all OpenGL functions as quickly as possible
    glFlush();
}


void drawFilledCircle(GLfloat x, GLfloat y, GLfloat radius,GLfloat c1, GLfloat c2, GLfloat c3){
    int i;
    int triangleAmount = 30;                        // No of triangles used to draw circle
    glColor3f(c1, c2, c3);                          // Set Color
    GLfloat twicePi = 2.0f * 3.1415926f;            // GLfloat radius = 0.8f; //radius
    glBegin(GL_TRIANGLE_FAN);                       // Set GL drawing method to trainagle fan
    glVertex2f(x, y);                               // set center of circle
    
    // loop to draw the circle by 40 triangle fan
    for(i = 0; i <= triangleAmount;i++) {
        glVertex2f(x + (radius * cos(i *  twicePi / triangleAmount)), y + (radius * sin(i * twicePi / triangleAmount)));
    }
    
    glEnd();
}

void drawPolygon(double c1,double c2, double c3, int x1,int x2,int x3,int x4,int y1,int y2,int y3,int y4){
    glColor3f(c1,c2,c3);                            // set polygonal color
    glPointSize(3.0);                               // set point size to 3
    glBegin(GL_POLYGON);                            //  Set GL drawing method to Polygon
    
    // set Polygon Vertices
    glVertex2i(x1,y1);
    glVertex2i(x2,y2);
    glVertex2i(x3,y3);
    glVertex2i(x4,y4);
    
    glEnd();
    glFlush();
    
}

void drawEmptyPolygon(double c1,double c2, double c3, int x1,int x2,int x3,int x4,int y1,int y2,int y3,int y4){
    glColor3f(c1,c2,c3);                         // set polygonal color
    glPointSize(3.0);                            // set point size to 3
    glBegin(GL_LINE_LOOP);                       //  Set GL drawing method to Line Loop
    
    // set Polygon Vertices
    glVertex2i(x1,y1);
    glVertex2i(x2,y2);
    glVertex2i(x3,y3);
    glVertex2i(x4,y4);
    
    glEnd();
    glFlush();
    
}

void rotatePolygon(wePt2D * verts, GLint nVerts, wePt2D pivPt, GLdouble theta){
    wePt2D vertsRot[3];
    GLint k;
    
    for (k = 0; k < nVerts; k++){
        vertsRot[k].x = pivPt.x + (verts[k].x - pivPt.x) * cos(theta) - (verts[k].y - pivPt.y) * sin(theta);
        vertsRot[k].y = pivPt.y + (verts[k].x - pivPt.x) * sin(theta) + (verts[k].y - pivPt.y) * cos(theta);
    }
    glBegin(GL_POLYGON);
    for (k = 0; k < nVerts; k++){
        glVertex2f(vertsRot[k].x, vertsRot[k].y);
    }
    glEnd();
}

void drawPolygon(GLint x, GLint y, GLdouble theta, GLdouble px, GLdouble py ){
    GLint k, nVerts = 3;
    wePt2D verts[3];
    wePt2D pivPt;
    pivPt.x = px;
    pivPt.y = py;
    setPixel(pivPt.x, pivPt.y);
    verts[0].x = x-5;
    verts[1].x = x;
    verts[2].x = x+5;
    verts[0].y = y;
    verts[1].y = y+14;
    verts[2].y = y;
    glColor3f(0.0, 1.0, 1.0);
    glBegin(GL_POLYGON);
    for (k = 0; k < nVerts; k++){
        glVertex2f(verts[k].x, verts[k].y);
    }
    glEnd();
    rotatePolygon(verts, nVerts, pivPt, theta);
}


void display(void) {
    
    // Clear Buffer
    glClear(GL_COLOR_BUFFER_BIT);
    
    // draw Circle;
    
    drawFilledCircle(100, -40, 35,0,0,0);
    drawFilledCircle(100, -40, 23,1,1,1);
    drawFilledCircle(100, -40, 15,0,0,1);
    
    drawFilledCircle(300, -40, 35,0,0,0);
    drawFilledCircle(300, -40, 23,1,1,1);
    drawFilledCircle(300, -40, 15,0,0,1);
    

    
    // Body
    drawPolygon(0.0,0.0,0.0,67,380,380,67,-16,-16,50,50);
    
    // Bumper
    drawPolygon(0.5,0.5,0.5,347,380,380,347,-26,-26,-16,-16);

    // Glass
    drawEmptyPolygon(0.0,0.0,0.0,140,180,180,140,124,124,50,50);
    drawEmptyPolygon(0.0,0.0,0.0,180,260,260,180,124,124,50,50);
    drawEmptyPolygon(0.0,0.0,0.0,260,280,280,260,124,124,50,50);
    
    
    // Triangles
    
    drawPolygon(100,-24,0.0,100,-40);
    drawPolygon(100,-24,45.0,100,-40);
    drawPolygon(100,-24,90.0,100,-40);
    drawPolygon(100,-24,135.0,100,-40);
    drawPolygon(100,-24,180.0,100,-40);
    drawPolygon(100,-24,225.0,100,-40);
    
    
    drawPolygon(300,-24,0.0,300,-40);
    drawPolygon(300,-24,45.0,300,-40);
    drawPolygon(300,-24,90.0,300,-40);
    drawPolygon(300,-24,135.0,300,-40);
    drawPolygon(300,-24,180.0,300,-40);
    drawPolygon(300,-24,225.0,300,-40);








    
    
    glEnd();
    glFlush();
    
}

void handler(unsigned char key, int x, int y){
    
    switch (key){
        case 'w':
            glClearColor (1.0, 1.0, 0.0, 0.0);
            break;
            
        case 'r':
            glClearColor (0.0, 1.0, 0.0, 0.0);

            break;
            
        default:
            break;
    }
    glutPostRedisplay(); //request display() call ASAP
}



// Main Method
int main(int argc, char * argv[]) {
    
    
    // initialize GLUT
    glutInit(&argc, argv);
    
    // initialize display MODE
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    
    // set display window SIZE
    glutInitWindowSize(1200, 700);
    
    // set display window ORIGIN
    glutInitWindowPosition(40, 60);
    
    // set window NAME
    glutCreateWindow("BMW 740Li");
    
    // initialize OpenGL
    init();
    
    // begain to draw the object
    glutKeyboardFunc(handler);
    glutDisplayFunc(display);


    
    //display everything and wait
    glutMainLoop();
    
    
    return 0;
    
}
